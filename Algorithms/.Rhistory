plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
data <- scale(as.matrix(hematoData))
hematopoietic <- c("Runx1", "Ikaros", "Myb", "Cbfa2t3h", "Gata1", "Mitf", "Nfe2", "Gfi1b", "Sfpi1", "Gfi1")
endothelial <- c("Erg", "Sox17", "Notch1", "Tbx3", "Tbx20", "Sox7", "HoxB4")
unclassified <- c("HoxB2", "HoxD8")
lambda = 1
lambda = diag(lambda,dim(data)[2],dim(data)[2])
data_cov=cov(data) + lambda
res_corr_filter = solve(data_cov) * (-1)
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
to_keep_pos <- 1
to_keep_neg <- to_keep_pos + 2
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep_pos) & my_order > to_keep_neg | (my_order < to_keep_neg & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
install.packages(c("plspm", "rstudioapi"))
install.packages(c("ggraph", "Hmisc", "igraph", "miic", "rstudioapi"))
install.packages(c("corrplot", "factoextra", "fields", "rstudioapi"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library("FactoMineR")
library("corrplot")
library("factoextra")
library("fields")
source("mnist_reader.R")
colors <- gray.colors(255)
# load images
train_x = load_image_file("../Datasets/train-images-idx3-ubyte")
test_x  = load_image_file("../Datasets/t10k-images-idx3-ubyte")
# load labels
train_y = as.factor(load_label_file("../Datasets/train-labels-idx1-ubyte"))
test_y = as.factor(load_label_file("../Datasets/t10k-labels-idx1-ubyte"))
test_x <- test_x / 255.0
# Compute PCA
resPCA <- PCA(test_x, scale.unit = FALSE)
label_col <- test_y
all_pred <- c()
index <- c()
data_y <- test_y
data_x <- test_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- predict.PCA(resPCA, data_x[ind,])$coord
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
all_pred <- c()
index <- c()
data_y <- test_y
data_x <- test_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- predict.PCA(resPCA, data_x[ind,])$coord
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
all_pred <- c()
index <- c()
data_y <- test_y
data_x <- test_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- predict.PCA(resPCA, data_x[ind,])$coord
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
print(dist)
conflict <- sum(dist < 1050) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=colors)
}
