# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
my_layout <- layout_with_graphopt
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
my_layout <- layout_with_lgl
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
library(miic)
library(ggraph)
library(igraph)
library(Hmisc)
data(hematoData)
data <- scale(as.matrix(hematoData))
hematopoietic <- c("Runx1", "Ikaros", "Myb", "Cbfa2t3h", "Gata1", "Mitf", "Nfe2", "Gfi1b", "Sfpi1", "Gfi1")
endothelial <- c("Erg", "Sox17", "Notch1", "Tbx3", "Tbx20", "Sox7", "HoxB4")
unclassified <- c("HoxB2", "HoxD8")
res_corr <- rcorr(data, type="pearson")
res_corr
res_corr_filter <- res_corr$r
res_corr_filter <- res_corr_filter[1:5, 1:5]
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 3
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
res_corr_filter
my_order < (ncol(res_corr_filter) - to_keep)
(my_order > to_keep & res_corr_filter > 0)
res_corr$r
res_corr
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
res_corr_filter <- res_corr_filter[5:10, 5:10]
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
res_corr_filter
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 1
my_order < (ncol(res_corr_filter) - to_keep)
(my_order > to_keep & res_corr_filter > 0)
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
res_corr_filter
res_corr
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
res_corr
res_corr_filter <- res_corr$r
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 1
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 3
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
to_keep <- 5
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 3
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 2
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
library(miic)
library(ggraph)
library(igraph)
library(Hmisc)
data(hematoData)
data <- scale(as.matrix(hematoData))
library(miic)
library(ggraph)
library(igraph)
library(Hmisc)
data(hematoData)
data <- scale(as.matrix(hematoData))
hematopoietic <- c("Runx1", "Ikaros", "Myb", "Cbfa2t3h", "Gata1", "Mitf", "Nfe2", "Gfi1b", "Sfpi1", "Gfi1")
endothelial <- c("Erg", "Sox17", "Notch1", "Tbx3", "Tbx20", "Sox7", "HoxB4")
unclassified <- c("HoxB2", "HoxD8")
res_corr <- rcorr(data, type="pearson")
res_corr
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 1
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
to_keep <- 5
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
library(miic)
library(ggraph)
library(igraph)
library(Hmisc)
data(hematoData)
data <- scale(as.matrix(hematoData))
hematopoietic <- c("Runx1", "Ikaros", "Myb", "Cbfa2t3h", "Gata1", "Mitf", "Nfe2", "Gfi1b", "Sfpi1", "Gfi1")
endothelial <- c("Erg", "Sox17", "Notch1", "Tbx3", "Tbx20", "Sox7", "HoxB4")
unclassified <- c("HoxB2", "HoxD8")
res_corr <- rcorr(data, type="pearson")
res_corr
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 3
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 2
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & (my_order > to_keep & res_corr_filter > 0)] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr
res_corr_filter <- res_corr$r
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 3
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & my_order > to_keep] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
to_keep <- 5
res_corr_filter[my_order > to_keep] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
res_corr_filter <- res_corr$r
# Filter edges with a threshold
thresh = 0.04
res_corr_filter[abs(res_corr$r) < thresh] <- 0
# Filter edges by keeping highest values
my_order <- t(apply(res_corr_filter, MARGIN=1, FUN=rank))
#res_corr_filter[my_order > to_keep] <- 0
to_keep <- 3
res_corr_filter[my_order < (ncol(res_corr_filter) - to_keep) & my_order > to_keep] <- 0
# Make graph
graph <- graph_from_adjacency_matrix(res_corr_filter, diag = FALSE, weight = TRUE, mode = "undirected")
# Parametrize
V(graph)$color <- ifelse(attr(V(graph), "names") %in% hematopoietic, "red",
ifelse(attr(V(graph), "names") %in% endothelial , "violet",
ifelse(attr(V(graph), "names") %in% unclassified , "gray", "deepskyblue")))
E(graph)$color <- ifelse(E(graph)$weight > 0, "blue","red")
E(graph)$width <- abs(E(graph)$weight) * 3
# Layout
#my_layout <- layout_with_dh
#my_layout <- layout_with_gem
#my_layout <- layout_with_graphopt
my_layout <- layout_with_lgl
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library("FactoMineR")
library("corrplot")
library("factoextra")
library("fields")
source("mnist_reader.R")
colors <- gray.colors(255)
# load images
train_x = load_image_file("../Datasets/train-images-idx3-ubyte")
test_x  = load_image_file("../Datasets/t10k-images-idx3-ubyte")
# load labels
train_y = as.factor(load_label_file("../Datasets/train-labels-idx1-ubyte"))
test_y = as.factor(load_label_file("../Datasets/t10k-labels-idx1-ubyte"))
test_x <- test_x / 255.0
# Compute PCA
resPCA <- PCA(test_x, scale.unit = FALSE)
label_col <- test_y
#layout(matrix(c(1,2), ncol=2))
plot.PCA(resPCA, choix = "var", label = "none")
fviz_pca_ind(resPCA, col.ind = label_col, label = "none", addEllipses = TRUE)
