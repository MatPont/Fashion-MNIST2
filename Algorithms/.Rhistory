plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
# Plot
plot(graph, layout=my_layout, edge.arrow.size=0.25)
install.packages(c("plspm", "rstudioapi"))
install.packages(c("ggraph", "Hmisc", "igraph", "miic", "rstudioapi"))
install.packages(c("corrplot", "factoextra", "fields", "rstudioapi"))
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library("Rtsne")
library("fields")
library("R.matlab")
source("mnist_reader.R")
plot_tsne <- function(tsne){
colors = rainbow(length(unique(train_y)))
names(colors) = unique(train_y)
kl <- round(tsne$itercosts[length(tsne$itercosts)], digits = 2)
plot_name <- paste("t-SNE with KL-divergence = ", kl, sep ="")
plot_name <- NULL
plot(tsne$Y, xlab = "Comp. 1", ylab = "Comp. 2", col = colors[train_y], main = plot_name)
}
# load images
train_x = load_image_file("../Datasets/train-images-idx3-ubyte")
test_x  = load_image_file("../Datasets/t10k-images-idx3-ubyte")
# load labels
train_y = as.factor(load_label_file("../Datasets/train-labels-idx1-ubyte"))
test_y = as.factor(load_label_file("../Datasets/t10k-labels-idx1-ubyte"))
train_x_enc = as.matrix(readMat("../Results/ae/ae_encoded.mat")$X)
ae = as.matrix(readMat("../Results/ae/ae_49_encoded.mat")$X)
ae2 = as.matrix(readMat("../Results/ae/ae_encoded.mat")$X)
ae3 = as.matrix(readMat("../Results/ae/ae_100_encoded.mat")$X)
cae = as.matrix(readMat("../Results/ae/cae1_encoded.mat")$X)
cae2 = as.matrix(readMat("../Results/ae/cae2_encoded.mat")$X)
all_data <- cbind(ae, ae2, ae3, cae, cae2)
dim(all_data)
tsne <- Rtsne(all_data, verbose = TRUE)
dev.off()
layout(matrix(1:2, nrow=1))
plot_tsne(tsne)
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 15) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
dev.off()
layout(matrix(1:2, nrow=1))
plot_tsne(tsne)
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < 20) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
threshold <- 10 #15
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < threshold) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
dev.off()
layout(matrix(1:2, nrow=1))
plot_tsne(tsne)
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
threshold <- 10 #15
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < threshold) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
tsne <- Rtsne(all_data, verbose = TRUE)
dev.off()
layout(matrix(1:2, nrow=1))
plot_tsne(tsne)
plot_tsne(tsne)
all_pred <- c()
index <- c()
data_y <- train_y
data_x <- train_x
threshold <- 15
for(y in unique(data_y)){
conflict <- TRUE
cpt <- 1
while(conflict){
ind <- which(y == data_y)[cpt]
print(ind)
pred <- tsne$Y[ind,]
temp_pred <- pred[1:2]
if(! is.null(all_pred)){
dist <- apply(all_pred, MARGIN=1, function(x) { sqrt(sum((x - temp_pred)^2)) } )
conflict <- sum(dist < threshold) != 0
cpt <- cpt + 1
}else{
conflict <- FALSE
}
}
index <- c(index, ind)
all_pred <- rbind(all_pred, temp_pred)
print(temp_pred)
add.image(pred[1], pred[2], matrix(rev(unlist(data_x[ind,])), nrow=28), image.width = 0.15, col=gray.colors(255))
}
install.packages("klaR")
library(klaR)
#################################################
# Import data
#################################################
res_path = "../Results/ae/"
ae = readMat(paste(res_path, "ae_49_encoded.mat", sep=""))
ae2 = readMat(paste(res_path, "ae_encoded.mat", sep=""))
ae3 = readMat(paste(res_path, "ae_100_encoded.mat", sep=""))
cae = readMat(paste(res_path, "cae_encoded.mat", sep=""))
cae2 = readMat(paste(res_path, "cae2_encoded.mat", sep=""))
res_models <- read.csv("../Results/ae/partitions_5.csv")
cae = readMat(paste(res_path, "cae1_encoded.mat", sep=""))
res_models <- read.csv("../Results/ae/partitions_5.csv")
dim(res_models)
label <- as.factor(load_label_file("../Datasets/train-labels-idx1-ubyte"))
temp <- kmodes(res_models, 10)
temp
temp$cluster
NMI(temp$cluster, y)
library(R.matlab)
library(mclust)
library(Rmixmod)
library(aricode)
library(klaR)
source("mnist_reader.R")
NMI(temp$cluster, y)
NMI(temp$cluster, label)
ARI(temp$cluster, label)
dim(res_models)
nmis <- c()
aris <- c()
for(i in 1:10){
#res_mixmod <- mixmodCluster(as.data.frame(type.convert(res_models)), nbCluster = 10, models=mixmodMultinomialModel(), dataType="qualitative")
#pred <- res_mixmod@bestResult@partition
res_kmodes <- kmodes(res_models, 10, iter.max = 300)
res_nmi <- NMI(as.factor(pred), as.factor(label))
res_ari <- ARI(as.factor(pred), as.factor(label))
cat(res_nmi, ", ", res_ari, "\n")
# nmis <- c(nmis, res_nmi)
aris <- c(aris, res_ari)
}
nmis <- c()
aris <- c()
for(i in 1:10){
#res_mixmod <- mixmodCluster(as.data.frame(type.convert(res_models)), nbCluster = 10, models=mixmodMultinomialModel(), dataType="qualitative")
#pred <- res_mixmod@bestResult@partition
res_kmodes <- kmodes(res_models, 10, iter.max = 300)
pred <- res_kmodes$cluster
res_nmi <- NMI(as.factor(pred), as.factor(label))
res_ari <- ARI(as.factor(pred), as.factor(label))
cat(res_nmi, ", ", res_ari, "\n")
# nmis <- c(nmis, res_nmi)
aris <- c(aris, res_ari)
}
nmis <- c()
aris <- c()
for(i in 1:10){
#res_mixmod <- mixmodCluster(as.data.frame(type.convert(res_models)), nbCluster = 10, models=mixmodMultinomialModel(), dataType="qualitative")
#pred <- res_mixmod@bestResult@partition
res_kmodes <- kmodes(res_models, 10, iter.max = 300, fast = F)
pred <- res_kmodes$cluster
res_nmi <- NMI(as.factor(pred), as.factor(label))
res_ari <- ARI(as.factor(pred), as.factor(label))
cat(res_nmi, ", ", res_ari, "\n")
# nmis <- c(nmis, res_nmi)
aris <- c(aris, res_ari)
}
nmis <- c()
aris <- c()
for(i in 1:10){
#res_mixmod <- mixmodCluster(as.data.frame(type.convert(res_models)), nbCluster = 10, models=mixmodMultinomialModel(), dataType="qualitative")
#pred <- res_mixmod@bestResult@partition
res_kmodes <- kmodes(res_models, 10, iter.max = 300, weighted = T)# fast = F)
pred <- res_kmodes$cluster
res_nmi <- NMI(as.factor(pred), as.factor(label))
res_ari <- ARI(as.factor(pred), as.factor(label))
cat(res_nmi, ", ", res_ari, "\n")
# nmis <- c(nmis, res_nmi)
aris <- c(aris, res_ari)
}
nmis <- c()
aris <- c()
for(i in 1:20){
#res_mixmod <- mixmodCluster(as.data.frame(type.convert(res_models)), nbCluster = 10, models=mixmodMultinomialModel(), dataType="qualitative")
#pred <- res_mixmod@bestResult@partition
res_kmodes <- kmodes(res_models, 10, iter.max = 3000)# fast = F)
pred <- res_kmodes$cluster
res_nmi <- NMI(as.factor(pred), as.factor(label))
res_ari <- ARI(as.factor(pred), as.factor(label))
cat(res_nmi, ", ", res_ari, "\n")
# nmis <- c(nmis, res_nmi)
aris <- c(aris, res_ari)
}
cat("##############\n# Consensus\n##############\n")
cat(mean(nmis), " $\pm$ ", sd(nmis), "\n")
cat(mean(aris), " $\pm$ ", sd(aris), "\n")
cat(mean(nmis), " $\\pm$ ", sd(nmis), "\n")
cat(mean(aris), " $\\pm$ ", sd(aris), "\n")
cat(mean(nmis), " $\\pm$ ", sd(nmis), "\n")
nmis
nmis <- c()
aris <- c()
for(i in 1:20){
#res_mixmod <- mixmodCluster(as.data.frame(type.convert(res_models)), nbCluster = 10, models=mixmodMultinomialModel(), dataType="qualitative")
#pred <- res_mixmod@bestResult@partition
res_kmodes <- kmodes(res_models, 10, iter.max = 3000, fast = F)
pred <- res_kmodes$cluster
res_nmi <- NMI(as.factor(pred), as.factor(label))
res_ari <- ARI(as.factor(pred), as.factor(label))
cat(res_nmi, ", ", res_ari, "\n")
nmis <- c(nmis, res_nmi)
aris <- c(aris, res_ari)
}
install.packages("EnsCat")
library(EnsCat)
?EnsCat::kmodes
EnsCat::kmodes(res_models, 10)
res <- EnsCat::kmodes(res_models, 10)
